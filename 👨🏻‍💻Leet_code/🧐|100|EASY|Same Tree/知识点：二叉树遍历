# 题目定义：
Same tree问题，是给定两颗已知二叉树，用程序去检验两颗二叉树是否相同。

# 知识点

## 二叉树遍历类型
* 前序遍历：根结点优先=> 左子树优先=> 右子树
* 中序遍历：左子树优先=> 根结点优先=> 右子树
* 后序遍历：左子树优先=> 右子树优先=> 根结点
* 层次遍历：只需按层次遍历即可
简单例子可详见：https://blog.csdn.net/My_Jobs/article/details/43451187

# 题目解析

## 本题LeetCode官方有两种解法：
1. 递归 =》但实际也是层级遍历二叉树
2. 遍历二叉树

## Kai的解法和发现
1. 遍历编写方法：
Kai使用的是前序遍历，本题中有意思的点是，如何去写遍历二叉树。我们从根节点往下走，到达最后一个节点。往根节点返回时我们如何确认这个根节点的子节点都处理完了，不再处理这个节点？中心思想是，**我们到达过这个节点，那么这个节点以及其左侧子节点都被处理过。**

Op1 我们从指针指向根节点，进入，一直向左子节点走，如果遍历到的节点不为空将此节点放入一个LIST，遍历到左支末尾为nullptr。
Op2 我们将LIST最后一个有效节点pop出来（因为此节点左右都遍历过了，不管他层级有多高都不需要再回到此点哪怕是跟节点，所以就不用记录了），指针指向其右节点，使用右节点当作新的根结点，使用进行遍历Op1。当指针指向nullptr同时，且list为空时候，遍历结束。

完整解释可详见：https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/

2. 关于指针
//@CAUTION 指针声明真的有些麻烦，需要先声明给一个variable，再用这个variable的地址赋值给指针。
//@CAUTION 调取不存在的指针的值的时候，系统不会throw exception，会直接退出，exit code11.所以需要手动写指针的验证。

